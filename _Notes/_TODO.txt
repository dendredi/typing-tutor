
* Implement SymbolTable properly!
	- Recursion not working
	- Duplicate identifier in scope error!

* Why does StructDefinition implement Declaration?


+++++++++++++++++++++++++++++++
+ Subtyping
+++++++++++++++++++++++++++++++

* Rules with "can be converted to" ('='-Expresion, .. )
* typedef int A; typedef A s; --> Extend AST wrapper
* typedef struct {...}x; --> supported by parser?


+++++++++++++++++++++++++++++++
+ Refactorings
+++++++++++++++++++++++++++++++

* Clearify: Is it really required to split code into "ast" and "typing" --> Instead, merge logic of both in "TypeExpression"
* Add Abstraction "Expression" (extends AstNode) for all those ast nodes which have a meaningful getType() and getTypingTree() implementation
* Rename TypeExpression to BaseTypeExpression; Add ConstructorTypeExpression


+++++++++++++++++++++++++++++++
+ Easy to implement
+++++++++++++++++++++++++++++++

* Implement 'FunctionDefinition' (not only ...Declaration)
* Implement 'CastExpression'
* Implement 'TypeDefStatement'
* Add abstraction to variable-declarations (global vs. local; own folder, then e.g. same impl of performTypeCheck)
* compare function return type and actual return --> throw error if needed


+++++++++++++++++++++++++++++++
+ Potentially blocked by CPARSE
+++++++++++++++++++++++++++++++

* Add dedicated type-expression for arrays (so there are two typing rules) (Note: Probably a problem due to cparse)
* Variable declaration without assignment (check value in parser)?